/**
    ───────────────────────── ⋆⋅☆⋅⋆ ─────────────────────────
                 ░░░░░██╗░█████╗░██╗░░░██╗████████╗
                 ░░░░░██║██╔══██╗██║░░░██║╚══██╔══╝
                 ░░░░░██║███████║██║░░░██║░░░██║░░░
                 ██╗░░██║██╔══██║██║░░░██║░░░██║░░░
                 ╚█████╔╝██║░░██║╚██████╔╝░░░██║░░░
                 ░╚════╝░╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░
                   JUCE Augmented Utility  Toolbox
    ───────────────────────── ⋆⋅☆⋅⋆ ─────────────────────────
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any internal version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <https://www.gnu.org/licenses/>.

    Copyright (c) 2022 ElandaSunshine
    ===============================================================

    @author Elanda
    @file   jaut_Datasets.h
    @date   02, August 2022

    ===============================================================
 */

#pragma once

#include <jaut_core/define/jaut_Define.h>

#include <array>
#include <string_view>



namespace jaut::dataset
{
    //==================================================================================================================
    namespace detail
    {
        struct MultiNamedType
        {
            //==========================================================================================================
            std::string_view names;
    
            //==========================================================================================================
            JAUT_NODISCARD
            constexpr int getNameCount() const noexcept
            {
                return static_cast<int>(std::count(names.begin(), names.end(), ';')) + 1;
            }
    
            JAUT_NODISCARD
            constexpr std::string_view getNameAt(int index) const noexcept
            {
                const int max_names = getNameCount();
        
                if (index >= max_names)
                {
                    return "";
                }
        
                std::size_t last_start = 0;
                std::size_t last_pos   = 0;
        
                for (int i = 0; i < max_names; ++i)
                {
                    last_start = last_pos;
                    last_pos   = names.find(';', last_pos);
            
                    if (i == index)
                    {
                        std::string_view substring = names.substr(last_start, last_pos);
                        substring.remove_prefix(std::min(substring.find_first_not_of(' '), substring.size()));
                        substring.remove_suffix(std::min(names.size() - substring.find_last_not_of(' '), substring.size()));
                
                        return substring;
                    }
                }
        
                return names;
            }
        };
    }
    
    //==================================================================================================================
    struct JAUT_API LanguageType final : detail::MultiNamedType
    {
        //==============================================================================================================
        const std::string_view alpha_2;
        const std::string_view alpha_3;
        
        //==============================================================================================================
        constexpr LanguageType(std::string_view alpha2code,
                               std::string_view alpha3code,
                               std::string_view nameList) noexcept
            : detail::MultiNamedType { nameList },
              alpha_2(alpha2code),
              alpha_3(alpha3code)
        {}
    };
    
    struct JAUT_API CountryType final
    {
        //==============================================================================================================
        const std::string_view alpha_2;
        const std::string_view alpha_3;
        const std::string_view name;
    };
    
    struct JAUT_API ScriptType final : detail::MultiNamedType
    {
        //==============================================================================================================
        const std::string_view tag;
        const std::string_view names;

        //==============================================================================================================
        constexpr ScriptType(std::string_view tagName, std::string_view nameList) noexcept
            : detail::MultiNamedType { nameList },
              tag(tagName)
        {}
    };

    //==================================================================================================================
    inline constexpr std::array<LanguageType, @JAUT_DATASET_languages_LEN@> languages {{
@JAUT_DATASET_languages@
    }};

    inline constexpr std::array<CountryType, @JAUT_DATASET_countries_LEN@> countries {{
@JAUT_DATASET_countries@
    }};

    inline constexpr std::array<ScriptType, @JAUT_DATASET_scripts_LEN@> scripts {{
@JAUT_DATASET_scripts@
    }};
}
