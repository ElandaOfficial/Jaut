/**
    ─────────────────────────────── ⋆⋅☆⋅⋆ ───────────────────────────────
                     ░░░░░██╗░█████╗░██╗░░░██╗████████╗
                     ░░░░░██║██╔══██╗██║░░░██║╚══██╔══╝
                     ░░░░░██║███████║██║░░░██║░░░██║░░░
                     ██╗░░██║██╔══██║██║░░░██║░░░██║░░░
                     ╚█████╔╝██║░░██║╚██████╔╝░░░██║░░░
                     ░╚════╝░╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░
                       JUCE Augmented Utility  Toolbox
    ─────────────────────────────── ⋆⋅☆⋅⋆ ───────────────────────────────
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any internal version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <https://www.gnu.org/licenses/>.
    
    Copyright (c) 2022 ElandaSunshine
    ===============================================================
    
    @author Elanda
    @file   jaut_AbstractConfigParserCustomOut.cpp
    @date   25, July 2022
    
    ===============================================================
 */

#include <jaut_provider/config/jaut_AbstractConfigParserCustomOut.h>



//**********************************************************************************************************************
// region Namespace
//======================================================================================================================
namespace
{
    
}
//======================================================================================================================
// endregion Namespace
//**********************************************************************************************************************
// region AbstractConfigParserCustomOut::Indent
//======================================================================================================================
namespace jaut
{
    auto AbstractConfigParserCustomOut::Indent::next() noexcept
        -> typename AbstractConfigParserCustomOut::Indent
    {
        return { depth + 1, width };
    }
    
    juce::String AbstractConfigParserCustomOut::Indent::toString(int parDepthMod)
    {
        const int amount = std::max(depth + parDepthMod, 0) * width;
        return (amount > 0 ? juce::String().paddedLeft(' ', amount) : "");
    }
}
//======================================================================================================================
// endregion AbstractConfigParserCustomOut::Indent
//**********************************************************************************************************************
// region AbstractConfigParserCustomOut
//======================================================================================================================
namespace jaut
{
    void AbstractConfigParserCustomOut::writeConfig(ParseAttributes<const Config::CategoryMap> parAttributes) const
    {        
        const Config::CategoryMap &categories = parAttributes.categories;
        const juce::String        &default_id = parAttributes.options.defaultCategory;
        
        std::vector<LineObject> lines;
        addStart(lines, parAttributes.options);
                
        if (treatDefaultCategoryFirst())
        {
            addDefaultCategory(lines, categories.at(default_id));
        }
        
        for (auto it = categories.begin(); it != categories.end(); ++it)
        {
            if (it->first == )
            {
                continue;
            }
            
            output << ::generateCategory(it->second, options, (it != categories.begin()));
        }
        
        getEnd(lines, parAttributes.options);
        
        for (auto &line : lines)
        {
            
        }
        
        if (!parAttributes.configFile.replaceWithText(output))
        {
            detail::throwWriteError(parAttributes.configFile);
        }
    }
}
//======================================================================================================================
// endregion AbstractConfigParserCustomOut
//**********************************************************************************************************************
    