/**
    ─────────────────────────────── ⋆⋅☆⋅⋆ ───────────────────────────────
                     ░░░░░██╗░█████╗░██╗░░░██╗████████╗
                     ░░░░░██║██╔══██╗██║░░░██║╚══██╔══╝
                     ░░░░░██║███████║██║░░░██║░░░██║░░░
                     ██╗░░██║██╔══██║██║░░░██║░░░██║░░░
                     ╚█████╔╝██║░░██║╚██████╔╝░░░██║░░░
                     ░╚════╝░╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░
                       JUCE Augmented Utility  Toolbox
    ─────────────────────────────── ⋆⋅☆⋅⋆ ───────────────────────────────
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any internal version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <https://www.gnu.org/licenses/>.
    
    Copyright (c) 2022 ElandaSunshine
    ===============================================================
    
    @author Elanda
    @file   jaut_AbstractConfigParserCustomOut.h
    @date   25, July 2022
    
    ===============================================================
 */

#pragma once

#include "jaut_provider/config/jaut_Config.h"
#include <jaut_core/define/jaut_Define.h>
#include <jaut_provider/config/jaut_IConfigParser.h>
#include <vector>



namespace jaut
{
    //==================================================================================================================
    /**
     *  An abstract helper class, deriving from jaut::IConfigParser, that helps writing the config file for custom
     *  formatting.
     */
    class JAUT_API AbstractConfigParserCustomOut : public IConfigParser
    {
    public:
        virtual void writeConfig(ParseAttributes<const Config::CategoryMap> attributes) const override;
        
    protected:
        /** The indent of the current line. */
        struct Indent
        {
            //==========================================================================================================
            /** The depth multiplier of the indent. */
            int depth;
            
            /** The width of one level of indent. */
            int width;
            
            //==========================================================================================================
            /**
             *  Gets the next indent. 
             *  @return The new indent
             */
            Indent next() noexcept;
            
            /**
             * Returns the current indent as string.
             * 
             * @param depthMod The number of how many levels should be added or removed to the current indent.
             * @return The indent as string of spaces
             */
            juce::String toString(int depthMod = 0);
        };
        
        /** Positional information about a category or setting property. */
        enum class PosInfo
        {
            First,
            Intermediate,
            Last
        };
        
        class LineObject
        {
        public:
            static LineObject newLine();
            static LineObject textLine();
            
        private:
            juce::String text;
            int isPlaceholder;
            
            //==========================================================================================================
            LineObject(juce::String text, Indent indent);
        };
        
        //==============================================================================================================
        /**
         *  Gets the start of the file, for language root elements or the config's notice element,
         *  this is where you add these lines.
         * 
         *  @param lines         The lines buffer
         *  @param configOptions The config object's options
         */
        virtual void addStart(std::vector<LineObject> &lines, const jaut::Config::Options &configOptions) const = 0;
        
        /**
         *  Gets the end of the file, for language root elements, this is where you add these lines.
         * 
         *  @param lines         The lines buffer
         *  @param configOptions The config object's options
         */
        virtual void addEnd(std::vector<LineObject> &lines, const jaut::Config::Options &configOptions) const = 0;
        
        /**
         *  Gets the default category object string.
         * 
         *  @param lines    The lines buffer
         *  @param category The category object
         */
        virtual void addDefaultCategory(std::vector<LineObject>      &lines,
                                        const jaut::Config::Property &category,
                                        Indent                       indent) const = 0;
        
        /**
         *  Gets the category object string.
         * 
         *  @param lines    The lines buffer
         *  @param category The category object
         *  @param pos      The relational position of this object, resulting from the traversal of the categories buffer
         */
        virtual void addCategory(std::vector<LineObject>      &lines,
                                 const jaut::Config::Property &category,
                                 PosInfo                      pos,
                                 Indent                       indent) const = 0;
        
        /**
         *  Gets the setting object string.
         * 
         *  @param lines   The lines buffer
         *  @param setting The setting object
         *  @param pos     The relational position of this object, resulting from the traversal of the settings buffer
         */
        virtual void addSetting(std::vector<LineObject>      &lines,
                                const jaut::Config::Property &setting,
                                PosInfo                      pos,
                                Indent                       indent) const = 0;
        
        /**
         *  Gets the comment string for the following object.
         * 
         *  @param lines   The lines buffer
         *  @param setting The setting object
         *  @param pos     The relational position of the object for this comment,
         *                 resulting from the traversal of the category buffer
         */
        virtual void addComment(std::vector<LineObject> &lines,
                                const juce::String      &commentText,
                                PosInfo                 pos,
                                Indent                  indent) const = 0;
        
        //==============================================================================================================
        /**
         *  Whether the default category should be treated as a standalone category and thus will be generated first,
         *  or if it should just generate as part of the other categories.
         * 
         *  @return True if the default category is individual, otherwise false
         */
        virtual bool treatDefaultCategoryFirst() const noexcept;
    };    
}
